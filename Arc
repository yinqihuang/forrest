### arc (vis)/ network diagram - correlation & semantic

#### neat ####
## set relative path
setwd(dirname(rstudioapi::getSourceEditorContext()$path))

## yay
library(tidyverse)
library(viridis)
library(patchwork)
library(hrbrthemes)
library(igraph)
library(ggraph)
library(colormap)

## read intrusion file
df <- list.files(path = '/Users/yinqi/Downloads/intrusions', pattern = '*.csv', full.names = TRUE) %>% tibble(filename = .) %>% mutate(file_contents = map(filename, ~read_csv(.))) %>% unnest() %>% select(-filename,-X7,-X8,-X9,-X10,-X11,-X12,-X13,-X14,-X15,-X16)
# OR
# df <- list.files(path = '/Users/yinqi/Downloads/intrusions', pattern = '*.csv', full.names = TRUE) %>% tibble(filename = .) %>% mutate(file_contents = map(filename, ~read_csv(.))) %>% unnest() %>% select(-filename)
# df <- subset(df, select = -c(X7:X16))

## read condition file
# be careful of the orientation of /
# make sure to rename filename so the two dfs match
cb <- list.files(path = '/Users/yinqi/Downloads', pattern = 'counterbalance', full.names = TRUE) %>% tibble(filename = .) %>% mutate(file_contents = map(filename, ~ read_csv(.))) %>% unnest() %>% mutate(filename = case_when(str_detect(filename, "counterbalance") ~ str_remove(filename, "Users(.*)/counterbalance")), filename = str_remove(filename, ".csv"), filename = str_remove(filename, "/")) %>% select(-imgStim) %>% rename(counterbalance = filename)

## merge dfs
# reduce human error aka sleepy yinqi
df <- df %>% left_join(cb, by = c('counterbalance', 'trial'))

## remove text 
df <- subset(df, select = -c(subID,trial,counterbalance,testTime,intrusionText,lag,narrativeCross,cond))

#### chisq ####
# intru <- df[,1]
# event <- df[,2]
tbl <- table(df)
result <- (chisq.test(tbl))
print(result)

#### arc ####
## create edge list (no need its just a df)

## arrange nodes: arrange = 
## direction matters: arrow = arrow
## merge lines based on counts
# df <- df %>% group_by(intrusionEvent, event) %>% summarise(weight = n())
# NA????
# 13 19 26 34 59 68 71 72 76 82 83
# OR
tbl <- as.data.frame(tbl)

# - SKIP - 
## group them by narratives
## prepare vector of color
# mycolor <- colormap(colormap = colormaps$viridis, nshades = 83)
# mycolor <- sample(mycolor, length(mycolor))
## give narratives different color

## convert to igraph
mygraph <- graph_from_data_frame(df)
p1 <-  ggraph(mygraph, layout="linear") + geom_edge_arc(edge_colour="grey", edge_alpha=0.3, fold = TRUE, end_cap = circle(0.2, 'cm'), start_cap = circle(0.2, 'cm'), aes(width = weight)) + geom_node_point(color="black", size=0.3) + geom_node_text(aes(label=name), size=3, color="black", nudge_y = -0.5)

#### text analysis ####
## try http://jalammar.github.io/illustrated-word2vec/
## try https://github.com/stanfordnlp/GloVe
